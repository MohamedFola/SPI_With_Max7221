
SPI_With_Max7221.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c1  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a0  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d8  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cd  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  64:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init_Master>:
// Function to receive Data for Master
unsigned char SPI_Master_receive()
{
	while(READ_BIT(SPI_Status_Register, SPIF) == 0);           // wait to receive all Data
	return SPI_Data_Register;                             // return the received Data
}
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	97 b3       	in	r25, 0x17	; 23
  76:	90 6b       	ori	r25, 0xB0	; 176
  78:	97 bb       	out	0x17, r25	; 23
  7a:	97 b3       	in	r25, 0x17	; 23
  7c:	9f 7b       	andi	r25, 0xBF	; 191
  7e:	97 bb       	out	0x17, r25	; 23
  80:	98 b3       	in	r25, 0x18	; 24
  82:	90 61       	ori	r25, 0x10	; 16
  84:	98 bb       	out	0x18, r25	; 24
  86:	82 fb       	bst	r24, 2
  88:	99 27       	eor	r25, r25
  8a:	90 f9       	bld	r25, 0
  8c:	90 6c       	ori	r25, 0xC0	; 192
  8e:	9e b9       	out	0x0e, r25	; 14
  90:	06 2f       	mov	r16, r22
  92:	01 70       	andi	r16, 0x01	; 1
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	00 0f       	add	r16, r16
  98:	11 1f       	adc	r17, r17
  9a:	02 95       	swap	r16
  9c:	12 95       	swap	r17
  9e:	10 7f       	andi	r17, 0xF0	; 240
  a0:	10 27       	eor	r17, r16
  a2:	00 7f       	andi	r16, 0xF0	; 240
  a4:	10 27       	eor	r17, r16
  a6:	41 70       	andi	r20, 0x01	; 1
  a8:	c4 2f       	mov	r28, r20
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d9 2f       	mov	r29, r25
  ae:	cc 0f       	add	r28, r28
  b0:	dd 1f       	adc	r29, r29
  b2:	cc 0f       	add	r28, r28
  b4:	dd 1f       	adc	r29, r29
  b6:	cc 0f       	add	r28, r28
  b8:	dd 1f       	adc	r29, r29
  ba:	a2 2f       	mov	r26, r18
  bc:	a1 70       	andi	r26, 0x01	; 1
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	aa 0f       	add	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	aa 0f       	add	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	81 fb       	bst	r24, 1
  ca:	ee 27       	eor	r30, r30
  cc:	e0 f9       	bld	r30, 0
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	00 65       	ori	r16, 0x50	; 80
  d6:	c0 2b       	or	r28, r16
  d8:	ac 2b       	or	r26, r28
  da:	ea 2b       	or	r30, r26
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	8e 2b       	or	r24, r30
  e0:	8d b9       	out	0x0d, r24	; 13
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <SPI_Master_Send>:
  ec:	8f b9       	out	0x0f, r24	; 15
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <SPI_Master_Send+0x2>
  f2:	08 95       	ret

000000f4 <MAX7221_Send>:
#define First_7_Segment                0x04



void MAX7221_Send(unsigned char Command, unsigned char Data)
{
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
	SET_BIT_LOW(SPI_Port_Name, SS);
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 7e       	andi	r25, 0xEF	; 239
  fc:	98 bb       	out	0x18, r25	; 24
	SPI_Master_Send(Command);
  fe:	0e 94 76 00 	call	0xec	; 0xec <SPI_Master_Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <MAX7221_Send+0x12>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <MAX7221_Send+0x18>
 10c:	00 00       	nop
	_delay_ms(1);
	SPI_Master_Send(Data);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 76 00 	call	0xec	; 0xec <SPI_Master_Send>
	SET_BIT_HIGH(SPI_Port_Name, SS);
 114:	88 b3       	in	r24, 0x18	; 24
 116:	80 61       	ori	r24, 0x10	; 16
 118:	88 bb       	out	0x18, r24	; 24
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
	unsigned int Counter = 1890;
    SPI_Init_Master(Clk_Rate_FOSC_divisable_by_16, Data_Order_MSB, Clk_Polarity_IDLE_LOW, Clk_Phase_LEADING);
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init_Master>
	MAX7221_Send(Mode_Register_Address,       0xFF);          // Enable Decode Mode for digits 7-0
 12a:	6f ef       	ldi	r22, 0xFF	; 255
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(Intensity_Regitser_Address,  0x09);          // Intensity 10/16
 132:	69 e0       	ldi	r22, 0x09	; 9
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(Scan_Limit_Register_Address, 0x03);          // 4 7-Segments are used
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	8b e0       	ldi	r24, 0x0B	; 11
 13e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(Shut_Down_Register_Address,  0x01);          // Turn on ship --> Normal Operation
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	
	MAX7221_Send(Fourth_7_Segment,  (Counter/1000)%10);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(Third_7_Segment,   (Counter/100)%10);
 152:	68 e0       	ldi	r22, 0x08	; 8
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(Second_7_Segment,  (Counter/10)%10);
 15a:	69 e0       	ldi	r22, 0x09	; 9
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
	MAX7221_Send(First_7_Segment,   (Counter%10));
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	39 e6       	ldi	r19, 0x69	; 105
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x52>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x5c>
 17a:	00 00       	nop
	SET_BIT_HIGH(SPI_Port_Name, SS);
}

int main(void)
{
	unsigned int Counter = 1890;
 17c:	02 e6       	ldi	r16, 0x62	; 98
 17e:	17 e0       	ldi	r17, 0x07	; 7
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0x68>
		MAX7221_Send(Third_7_Segment,   (Counter/100)%10);
		MAX7221_Send(Second_7_Segment,  (Counter/10)%10);
		MAX7221_Send(First_7_Segment,   (Counter%10));
		
		_delay_ms(100);
		(Counter > 9999) ? (Counter = 0) : (Counter++);
 182:	00 e0       	ldi	r16, 0x00	; 0
 184:	10 e0       	ldi	r17, 0x00	; 0
	MAX7221_Send(First_7_Segment,   (Counter%10));
	_delay_ms(1000);
	
    while (1) 
    { 
		MAX7221_Send(Fourth_7_Segment,  (Counter/1000)%10);
 186:	98 01       	movw	r18, r16
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	36 95       	lsr	r19
 18e:	27 95       	ror	r18
 190:	36 95       	lsr	r19
 192:	27 95       	ror	r18
 194:	a5 ec       	ldi	r26, 0xC5	; 197
 196:	b0 e2       	ldi	r27, 0x20	; 32
 198:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 19c:	ac 01       	movw	r20, r24
 19e:	52 95       	swap	r21
 1a0:	42 95       	swap	r20
 1a2:	4f 70       	andi	r20, 0x0F	; 15
 1a4:	45 27       	eor	r20, r21
 1a6:	5f 70       	andi	r21, 0x0F	; 15
 1a8:	45 27       	eor	r20, r21
 1aa:	9a 01       	movw	r18, r20
 1ac:	ad ec       	ldi	r26, 0xCD	; 205
 1ae:	bc ec       	ldi	r27, 0xCC	; 204
 1b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	bc 01       	movw	r22, r24
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	86 0f       	add	r24, r22
 1d4:	97 1f       	adc	r25, r23
 1d6:	28 1b       	sub	r18, r24
 1d8:	39 0b       	sbc	r19, r25
 1da:	62 2f       	mov	r22, r18
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
		MAX7221_Send(Third_7_Segment,   (Counter/100)%10);
 1e2:	98 01       	movw	r18, r16
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	ab e7       	ldi	r26, 0x7B	; 123
 1ee:	b4 e1       	ldi	r27, 0x14	; 20
 1f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 1f4:	ac 01       	movw	r20, r24
 1f6:	56 95       	lsr	r21
 1f8:	47 95       	ror	r20
 1fa:	9a 01       	movw	r18, r20
 1fc:	ad ec       	ldi	r26, 0xCD	; 205
 1fe:	bc ec       	ldi	r27, 0xCC	; 204
 200:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	bc 01       	movw	r22, r24
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	86 0f       	add	r24, r22
 224:	97 1f       	adc	r25, r23
 226:	28 1b       	sub	r18, r24
 228:	39 0b       	sbc	r19, r25
 22a:	62 2f       	mov	r22, r18
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
		MAX7221_Send(Second_7_Segment,  (Counter/10)%10);
 232:	98 01       	movw	r18, r16
 234:	ad ec       	ldi	r26, 0xCD	; 205
 236:	bc ec       	ldi	r27, 0xCC	; 204
 238:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 23c:	ec 01       	movw	r28, r24
 23e:	d6 95       	lsr	r29
 240:	c7 95       	ror	r28
 242:	d6 95       	lsr	r29
 244:	c7 95       	ror	r28
 246:	d6 95       	lsr	r29
 248:	c7 95       	ror	r28
 24a:	9e 01       	movw	r18, r28
 24c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 250:	96 95       	lsr	r25
 252:	87 95       	ror	r24
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	bc 01       	movw	r22, r24
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	86 0f       	add	r24, r22
 270:	97 1f       	adc	r25, r23
 272:	28 1b       	sub	r18, r24
 274:	39 0b       	sbc	r19, r25
 276:	62 2f       	mov	r22, r18
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
		MAX7221_Send(First_7_Segment,   (Counter%10));
 27e:	ce 01       	movw	r24, r28
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	cc 0f       	add	r28, r28
 286:	dd 1f       	adc	r29, r29
 288:	cc 0f       	add	r28, r28
 28a:	dd 1f       	adc	r29, r29
 28c:	cc 0f       	add	r28, r28
 28e:	dd 1f       	adc	r29, r29
 290:	c8 0f       	add	r28, r24
 292:	d9 1f       	adc	r29, r25
 294:	b8 01       	movw	r22, r16
 296:	6c 1b       	sub	r22, r28
 298:	7d 0b       	sbc	r23, r29
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 7a 00 	call	0xf4	; 0xf4 <MAX7221_Send>
 2a0:	3f ef       	ldi	r19, 0xFF	; 255
 2a2:	80 e7       	ldi	r24, 0x70	; 112
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	31 50       	subi	r19, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x188>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x192>
 2b0:	00 00       	nop
		
		_delay_ms(100);
		(Counter > 9999) ? (Counter = 0) : (Counter++);
 2b2:	00 31       	cpi	r16, 0x10	; 16
 2b4:	27 e2       	ldi	r18, 0x27	; 39
 2b6:	12 07       	cpc	r17, r18
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <main+0x19e>
 2ba:	63 cf       	rjmp	.-314    	; 0x182 <main+0x64>
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
 2c0:	62 cf       	rjmp	.-316    	; 0x186 <main+0x68>

000002c2 <__umulhisi3>:
 2c2:	a2 9f       	mul	r26, r18
 2c4:	b0 01       	movw	r22, r0
 2c6:	b3 9f       	mul	r27, r19
 2c8:	c0 01       	movw	r24, r0
 2ca:	a3 9f       	mul	r26, r19
 2cc:	70 0d       	add	r23, r0
 2ce:	81 1d       	adc	r24, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	91 1d       	adc	r25, r1
 2d4:	b2 9f       	mul	r27, r18
 2d6:	70 0d       	add	r23, r0
 2d8:	81 1d       	adc	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	91 1d       	adc	r25, r1
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
